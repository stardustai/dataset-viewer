name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., 1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.release.outputs.id || 'test-build' }}
      release_tag: v${{ steps.get_version.outputs.VERSION }}
      upload_url: ${{ steps.release.outputs.upload_url || 'test-build' }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RAW_VERSION="${{ github.event.inputs.tag }}"
          else
            RAW_VERSION="${GITHUB_REF#refs/tags/}"
          fi

          # 去掉v前缀，统一使用不带v的版本号
          VERSION="${RAW_VERSION#v}"

          # 为Windows MSI生成处理后的版本号
          WINDOWS_VERSION="$VERSION"
          WINDOWS_VERSION="${WINDOWS_VERSION//beta./}"
          WINDOWS_VERSION="${WINDOWS_VERSION//alpha./}"
          WINDOWS_VERSION="${WINDOWS_VERSION//rc./}"
          WINDOWS_VERSION="${WINDOWS_VERSION//-beta/-1}"
          WINDOWS_VERSION="${WINDOWS_VERSION//-alpha/-2}"
          WINDOWS_VERSION="${WINDOWS_VERSION//-rc/-3}"

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "WINDOWS_VERSION=$WINDOWS_VERSION" >> $GITHUB_OUTPUT

      - name: Build Changelog
        id: build_changelog
        if: github.event_name != 'workflow_dispatch'
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          ignorePreReleases: false
          fetchViaCommits: true
          commitMode: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: release
        if: github.event_name != 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Dataset Viewer v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}
          generate_release_notes: false
          body: |
            ${{ steps.build_changelog.outputs.changelog }}

            ### 💾 Downloads

            | Platform | Download |
            |----------|----------|
            | macOS (Apple Silicon) | [Download DMG](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/Dataset.Viewer_${{ steps.get_version.outputs.VERSION }}_aarch64.dmg) |
            | macOS (Intel) | [Download DMG](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/Dataset.Viewer_${{ steps.get_version.outputs.VERSION }}_x64.dmg) |
            | Windows x64 | [Download MSI](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/DatasetViewer_${{ steps.get_version.outputs.WINDOWS_VERSION }}_x64_en-US.msi) |
            | Linux (AppImage) | [Download AppImage](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/Dataset.Viewer_${{ steps.get_version.outputs.VERSION }}_amd64.AppImage) |

            ### 🔧 Installation

            - **macOS**: Download DMG → Drag to Applications → Run: `sudo xattr -d com.apple.quarantine "/Applications/Dataset Viewer.app"`
            - **Windows**: Download MSI → Run installer
            - **Linux (AppImage)**: `chmod +x "Dataset Viewer_"*.AppImage` → Run

  build-tauri:
    needs: create-release
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: ''
            arch: 'x64'
          - platform: 'windows-latest'
            args: ''
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust targets (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Setup macOS signing (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          # decode base64 -> p12 (use BSD compatible -D)
          printf '%s' "$APPLE_CERTIFICATE" | base64 -D > certificate.p12
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$APPLE_KEYCHAIN_PASSWORD" build.keychain
          # cleanup certificate file
          rm -f certificate.p12
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}

      - name: Set signing identity for ARM64 (macOS ARM only)
        if: matrix.platform == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          # Add signingIdentity field with "-" value for ARM64
          jq '.bundle.macOS.signingIdentity = "-"' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-all-crates: true

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install

      - name: Fix version for Windows MSI (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # Process version to match Windows MSI requirements
          $files = @("package.json", "src-tauri/Cargo.toml", "src-tauri/tauri.conf.json")

          foreach ($file in $files) {
            $content = Get-Content $file -Raw
            # Remove beta./alpha./rc. suffixes for Windows MSI compatibility
            $content = $content -replace 'beta\.', ''
            $content = $content -replace 'alpha\.', ''
            $content = $content -replace 'rc\.', ''
            # Replace pre-release tags with numbers
            $content = $content -replace '-beta', '-1'
            $content = $content -replace '-alpha', '-2'
            $content = $content -replace '-rc', '-3'
            Set-Content $file $content
          }

          # For Windows MSI compatibility, replace spaces with hyphens in productName
          $tauriConfig = Get-Content "src-tauri/tauri.conf.json" -Raw | ConvertFrom-Json
          $tauriConfig.productName = "DatasetViewer"
          $tauriConfig | ConvertTo-Json -Depth 10 | Set-Content "src-tauri/tauri.conf.json"
        shell: pwsh

      - uses: tauri-apps/tauri-action@v0
        if: github.event_name != 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }} -- --bin dataset-viewer
          includeUpdaterJson: false

      - name: Build only (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: pnpm tauri build ${{ matrix.args }} -- --bin dataset-viewer

      - name: Upload installer packages (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: dataset-viewer-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            src-tauri/target/**/bundle/**/*.dmg
            src-tauri/target/**/bundle/**/*.msi
            src-tauri/target/**/bundle/**/*.AppImage
          retention-days: 1
          if-no-files-found: warn
